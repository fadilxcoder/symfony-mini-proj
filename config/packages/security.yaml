security:
    encoders:
        App\Entity\User:
            algorithm: auto
            
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/booking, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY } # whitelisted

    # Users with the ROLE_SUPPORT role will also have the ROLE_USER role. 
    # And users with ROLE_ADMIN, will automatically have ROLE_SUPPORT, ROLE_ALLOWED_TO_SWITCH and ROLE_USER (inherited from ROLE_SUPPORT).
    # ROLE_ALLOWED_TO_SWITCH used for impersonation
    role_hierarchy:
        ROLE_SUPPORT: ROLE_USER
        ROLE_ADMIN: [ROLE_SUPPORT, ROLE_ALLOWED_TO_SWITCH]