# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    maintenance:
        status: true
        ipAuthorized: ["::1","127.0.0.1"]
    application_name: 'MauWorld Best Car Rental'
    # profile_settings_directory: '%kernel.project_dir%/public/images'

imports:
    - { resource: services/ }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    on_request_listener:
        class: App\Listener\OnRequestListener
        arguments:
            - '%maintenance%'
            - '@service_container'
        tags:
            - name: kernel.event_listener
              event: kernel.request
              method: onKernelRequest

    app.doctrine.hash_password_listener:
        class: App\Doctrine\HashPasswordListener
        autowire: true
        tags:
            - { name: doctrine.event_subscriber }

    String\Normalizer\StringNormalizer: ~

    app.dev_pack.string_normalizer:
        alias: String\Normalizer\StringNormalizer
        public: true

    on_controller_listener:
        class: App\Listener\OnControllerListener
        tags:
            - name: kernel.event_listener
              event: kernel.controller
              method: onKernelController

    Redis: '@snc_redis.default'